[
["manipulando-data-frames-com-dplyr.html", "5 Manipulando Data Frames com dplyr 5.1 Data Frames 5.2 O Pacote dplyr 5.3 Gramática do dplyr 5.4 Propriedades das funções do dplyr 5.5 Instalando o Pacote dplyr 5.6 select()", " 5 Manipulando Data Frames com dplyr 5.1 Data Frames 5.2 O Pacote dplyr O pacote dplyr foi desenvolvido por Hadley Wickham, cientista chefe do RStudio. É uma versão otimizada do pacote plyr. O pacote dplyr não fornece nenhuma funcionalidade “nova” ao R, pois já é feito com base no R, mas simplifica bastante a funcionalidade no R. Uma contribuição importante do dplyr é que ele fornece uma “gramática” (em particular, verbos) para manipulação 5.3 Gramática do dplyr Alguns dos principais “verbos” fornecidos pelo dplyr são: -select: retorna um subconjunto das colunas de um data.frames, usando uma notação flexível; -filter: extrair um subconjunto de linhas(observações) de um data.frames com base em condições lógicas; -arrange: reordenar linhas de um data.frames; -rename: renomear variáveis em um data.frames; -mutate: adiciona novas variáveis/colunas ou transforme variáveis existentes; -summarise/summarize: gera estatísticas resumidas de diferentes variáveis no data.frames, possivelmente dentro dos estratos. 5.4 Propriedades das funções do dplyr As funções têm algumas características comuns: O primeiro argumento é um data.frames; Os argumentos subsequentes descrevem o que fazer com o data.frames especificado no primeiro argumento; O resultado de retorno de uma função é um novo data.frames; Os data.frames devem devidamente formatados e anotados para que tudo isso seja útil. Em particular, os dados devem estar organizados. 5.5 Instalando o Pacote dplyr O pacote pode ser instalado a partir do CRAN ou do GitHub usando o pacote devtools com a função install_github(). O repositório GitHub normalmente contém as versões mais atualizadas dos pacotes. Para instalar a partir do CRAN, bastar executar: install.packages(&quot;dplyr&quot;) Para instalar a partir do GitHub, execute: library(devtools) #carregar o pacote &#39;devtools&#39; antes. devtools::install_github(&quot;hadley/dplyr&quot;) Após a instalação do pacote, carregá-lo com a função library(): library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union Ao carregar o pacote você pode receber alguns avisos, porque há funções no dplyrque têm o mesmo nome que as funções em outros pacotes. Por enquanto pode ignorar os avisos. 5.6 select() Para melhor apresentar as funcionalidades da função, usaremos um conjunto de dados contendo dados de poluição do ar e temperatura da cidade de Chicago nos EUA. Após descompactar o arquivo, você pode carregar os dados no R usando a função readRDS(): chicago &lt;- readRDS(&quot;data/chicago.rds&quot;) Este banco de chicago encontra no seguinte endereço http://www.biostat.jhsph.edu/~rpeng/leanpub/rprog/chicago_data.zip e está zipado. Uma das formas para facilitar o processo de descompactação do arquivo pelo R é: # objeto caracter. fileURL &lt;- &quot;http://www.biostat.jhsph.edu/~rpeng/leanpub/rprog/chicago_data.zip&quot; #Esta função pode ser usada para baixar um arquivo da Internet. download.file(fileURL, destfile = &quot;data/chicago.rds&quot;, method = &quot;curl&quot;, extra=&#39;-L&#39;) Umas das formas de ter informações do seu banco de dados é utilizar as seguintes funções dim() e str(). A primeira especifica a dimensão do seu banco e a segunda a estrutura do seu banco de dados. dim(chicago) ## [1] 6940 8 str(chicago) ## &#39;data.frame&#39;: 6940 obs. of 8 variables: ## $ city : chr &quot;chic&quot; &quot;chic&quot; &quot;chic&quot; &quot;chic&quot; ... ## $ tmpd : num 31.5 33 33 29 32 40 34.5 29 26.5 32.5 ... ## $ dptp : num 31.5 29.9 27.4 28.6 28.9 ... ## $ date : Date, format: &quot;1987-01-01&quot; &quot;1987-01-02&quot; ... ## $ pm25tmean2: num NA NA NA NA NA NA NA NA NA NA ... ## $ pm10tmean2: num 34 NA 34.2 47 NA ... ## $ o3tmean2 : num 4.25 3.3 3.33 4.38 4.75 ... ## $ no2tmean2 : num 20 23.2 23.8 30.4 30.3 ... Muitas vezes teremos um data.frames contendo um grande número de dados. Com isso, a função select() permite obter as poucas colunas que você pode precisar. Suponhamos que desejássemos pegar as 3 primeiras colunas. Há algumas maneiras de fazer isto. Poderíamos, por exemplo, usar o índices númericos. Mas também podemos usar os nomes diretamente. names(chicago[1:3]) ## [1] &quot;city&quot; &quot;tmpd&quot; &quot;dptp&quot; subset1 &lt;- select(chicago, city:dptp) head(subset1) ## city tmpd dptp ## 1 chic 31.5 31.500 ## 2 chic 33.0 29.875 ## 3 chic 33.0 27.375 ## 4 chic 29.0 28.625 ## 5 chic 32.0 28.875 ## 6 chic 40.0 35.125 Normalmente : não pode ser usado com nomes ou sequências de caracteres, mas dentro da função select() pode usá-lo para especificar um intervalo de nomes de variáveis. Pode omitir variáveis usando a função select() usando o sinal negativo. subset2 &lt;- select(chicago, -(city:dptp)) head(subset2) ## date pm25tmean2 pm10tmean2 o3tmean2 no2tmean2 ## 1 1987-01-01 NA 34.00000 4.250000 19.98810 ## 2 1987-01-02 NA NA 3.304348 23.19099 ## 3 1987-01-03 NA 34.16667 3.333333 23.81548 ## 4 1987-01-04 NA 47.00000 4.375000 30.43452 ## 5 1987-01-05 NA NA 4.750000 30.33333 ## 6 1987-01-06 NA 48.00000 5.833333 25.77233 "]
]
