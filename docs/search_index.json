[
["manipulando-data-frames-com-dplyr.html", "4 Manipulando Data Frames com dplyr 4.1 Data Frames 4.2 O Pacote dplyr 4.3 Gramática do dplyr 4.4 Propriedades das funções do dplyr 4.5 Instalando o Pacote dplyr 4.6 select() 4.7 rename() 4.8 mutate()", " 4 Manipulando Data Frames com dplyr 4.1 Data Frames 4.2 O Pacote dplyr O pacote dplyr foi desenvolvido por Hadley Wickham, cientista chefe do RStudio. É uma versão otimizada do pacote plyr. O pacote dplyr não fornece nenhuma funcionalidade “nova” ao R, pois já é feito com base no R, mas simplifica bastante a funcionalidade no R. Uma contribuição importante do dplyr é que ele fornece uma “gramática” (em particular, verbos) para manipulação 4.3 Gramática do dplyr Alguns dos principais “verbos” fornecidos pelo dplyr são: -select: retorna um subconjunto das colunas de um data.frames, usando uma notação flexível; -filter: extrair um subconjunto de linhas(observações) de um data.frames com base em condições lógicas; -arrange: reordenar linhas de um data.frames; -rename: renomear variáveis em um data.frames; -mutate: adiciona novas variáveis/colunas ou transforme variáveis existentes; -summarise/summarize: gera estatísticas resumidas de diferentes variáveis no data.frames, possivelmente dentro dos estratos. 4.4 Propriedades das funções do dplyr As funções têm algumas características comuns: -1.O primeiro argumento é um data.frames; -2.Os argumentos subsequentes descrevem o que fazer com o data.frames especificado no primeiro argumento; -3.O resultado de retorno de uma função é um novo data.frames; -4.Os data.frames devem devidamente formatados e anotados para que tudo isso seja útil. Em particular, os dados devem estar organizados. 4.5 Instalando o Pacote dplyr O pacote pode ser instalado a partir do CRAN ou do GitHub usando o pacote devtools com a função install_github(). O repositório GitHub normalmente contém as versões mais atualizadas dos pacotes. Para instalar a partir do CRAN, bastar executar: install.packages(&quot;dplyr&quot;) Para instalar a partir do GitHub, execute: library(devtools) #carregar o pacote &#39;devtools&#39; antes. devtools::install_github(&quot;hadley/dplyr&quot;) Após a instalação do pacote, carregá-lo com a função library(): library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union Ao carregar o pacote você pode receber alguns avisos, porque há funções no dplyrque têm o mesmo nome que as funções em outros pacotes. Por enquanto pode ignorar os avisos. 4.6 select() Para melhor apresentar as funcionalidades da função, usaremos um conjunto de dados diários sobre poluição do ar e taxa de mortalidade da cidade de Chicago, nos EUA. Você pode carregar os dados no R usando a função readRDS(): chicago &lt;- readRDS(&quot;data/chicago.rds&quot;) Este banco de dados encontra no seguinte endereço: http://www.biostat.jhsph.edu/~rpeng/leanpub/rprog/chicago_data.zip e está em um arquivo zipado. Uma das formas para facilitar o processo de descompactação do arquivo pelo R é: # objeto caracter, endereço do arquivo. fileURL &lt;- &quot;http://www.biostat.jhsph.edu/~rpeng/leanpub/rprog/chicago_data.zip&quot; #Esta função pode ser usada para baixar um arquivo da Internet. download.file(fileURL, destfile = &quot;data/chicago.rds&quot;, method = &quot;curl&quot;, extra=&#39;-L&#39;) Descrição do banco: tem 8 colunas e 6940 linhas. Cada linha refere-se a um dia. As colunas são: city: cidade, neste campo tem apenas “chic” referenciando a cidade de Chicago. tmpd: temperatura em Fahrenheit. dptp: temperatura do ponto de orvalho. date: tempo em dias. pm25tmean2: partículas médias &lt; 2,5mg por m cúbico (mais perigoso). pm10tmean2: partículas médias em 2,5^-10 por m cúbico. o3tmean2: Ozônio em partes por bilhão. no2tmean2: Medição mediana de dióxido de sulfato. Umas das formas de ter informações do seu banco de dados é utilizar as seguintes funções dim() e str(). A primeira especifica a dimensão do seu banco e a segunda a estrutura do seu banco de dados. dim(chicago) ## [1] 6940 8 str(chicago) ## &#39;data.frame&#39;: 6940 obs. of 8 variables: ## $ city : chr &quot;chic&quot; &quot;chic&quot; &quot;chic&quot; &quot;chic&quot; ... ## $ tmpd : num 31.5 33 33 29 32 40 34.5 29 26.5 32.5 ... ## $ dptp : num 31.5 29.9 27.4 28.6 28.9 ... ## $ date : Date, format: &quot;1987-01-01&quot; &quot;1987-01-02&quot; ... ## $ pm25tmean2: num NA NA NA NA NA NA NA NA NA NA ... ## $ pm10tmean2: num 34 NA 34.2 47 NA ... ## $ o3tmean2 : num 4.25 3.3 3.33 4.38 4.75 ... ## $ no2tmean2 : num 20 23.2 23.8 30.4 30.3 ... Muitas vezes teremos um data.frames contendo um grande número de dados. Com isso, a função select() permite obter as poucas colunas que você pode precisar. Suponhamos que desejássemos pegar as 3 primeiras colunas. Há algumas maneiras de fazer isto. Poderíamos, por exemplo, usar o índices númericos. Mas também podemos usar os nomes diretamente. names(chicago[1:3]) ## [1] &quot;city&quot; &quot;tmpd&quot; &quot;dptp&quot; subset1 &lt;- select(chicago, city:dptp) head(subset1) ## city tmpd dptp ## 1 chic 31.5 31.500 ## 2 chic 33.0 29.875 ## 3 chic 33.0 27.375 ## 4 chic 29.0 28.625 ## 5 chic 32.0 28.875 ## 6 chic 40.0 35.125 Normalmente : não pode ser usado com nomes ou sequências de caracteres, mas dentro da função select() pode usá-lo para especificar um intervalo de nomes de variáveis. Pode omitir variáveis usando a função select() usando o sinal negativo. subset2 &lt;- select(chicago, -(city:dptp)) head(subset2) ## date pm25tmean2 pm10tmean2 o3tmean2 no2tmean2 ## 1 1987-01-01 NA 34.00000 4.250000 19.98810 ## 2 1987-01-02 NA NA 3.304348 23.19099 ## 3 1987-01-03 NA 34.16667 3.333333 23.81548 ## 4 1987-01-04 NA 47.00000 4.375000 30.43452 ## 5 1987-01-05 NA NA 4.750000 30.33333 ## 6 1987-01-06 NA 48.00000 5.833333 25.77233 o que indica que estamos incluindo todas as variáveis, exceto as variáveis city até dptp. O código equivalente ao anterior sem o uso do pacote seria: i &lt;- match(&quot;city&quot;, names(chicago)) j &lt;- match(&quot;dptp&quot;, names(chicago)) head(chicago[, -(i:j)]) ## date pm25tmean2 pm10tmean2 o3tmean2 no2tmean2 ## 1 1987-01-01 NA 34.00000 4.250000 19.98810 ## 2 1987-01-02 NA NA 3.304348 23.19099 ## 3 1987-01-03 NA 34.16667 3.333333 23.81548 ## 4 1987-01-04 NA 47.00000 4.375000 30.43452 ## 5 1987-01-05 NA NA 4.750000 30.33333 ## 6 1987-01-06 NA 48.00000 5.833333 25.77233 A função de correspondência mathc() retorna um vetor das posições das (primeiras) correspondências de seu primeiro argumento no segundo. De acordo com a Documentação R, a função é equivalente ao operador %in% que indica se uma correspondência foi localizada para o vetor1 no vetor2. O valor do resultado será VERDADEIRO ou FALSO, mas nunca NA. Portanto, o operador %in% pode ser útil em condições if. Exemplos: #função math(). v1 &lt;- c(&quot;a1&quot;,&quot;b2&quot;,&quot;c1&quot;,&quot;d2&quot;) v2 &lt;- c(&quot;g1&quot;,&quot;x2&quot;,&quot;d2&quot;,&quot;e2&quot;,&quot;f1&quot;,&quot;a1&quot;,&quot;c2&quot;,&quot;b2&quot;,&quot;a2&quot;) x &lt;- match(v1,v2) x ## [1] 6 8 NA 3 #com o operador %in%. v1 &lt;- c(&quot;a1&quot;,&quot;b2&quot;,&quot;c1&quot;,&quot;d2&quot;) v2 &lt;- c(&quot;g1&quot;,&quot;x2&quot;,&quot;d2&quot;,&quot;e2&quot;,&quot;f1&quot;,&quot;a1&quot;,&quot;c2&quot;,&quot;b2&quot;,&quot;a2&quot;) v1 %in% v2 ## [1] TRUE TRUE FALSE TRUE A função select() permite uma sintaxe especial que especifica nomes de variáveis com base em padrões. Por exemplo, há várias funções auxiliares que você pode usar: 1.starts_with(\"abc\"): corresponde aos nomes que começam com “abc”; #Queremos manter todas as variáveis que começam com um &quot;d&quot;: subset3 &lt;- select(chicago, starts_with(&quot;d&quot;)) head(subset3) ## dptp date ## 1 31.500 1987-01-01 ## 2 29.875 1987-01-02 ## 3 27.375 1987-01-03 ## 4 28.625 1987-01-04 ## 5 28.875 1987-01-05 ## 6 35.125 1987-01-06 2.ends_with(\"xyz\"): corresponde aos nomes que terminam com “xyz”; subset4 &lt;- select(chicago, ends_with(&quot;2&quot;)) head(subset4) ## pm25tmean2 pm10tmean2 o3tmean2 no2tmean2 ## 1 NA 34.00000 4.250000 19.98810 ## 2 NA NA 3.304348 23.19099 ## 3 NA 34.16667 3.333333 23.81548 ## 4 NA 47.00000 4.375000 30.43452 ## 5 NA NA 4.750000 30.33333 ## 6 NA 48.00000 5.833333 25.77233 3.contains(\"ijk\"): corresponde aos nomes que contêm “ijk”; subset5 &lt;- select(chicago, contains(&quot;tmean&quot;)) head(subset5) ## pm25tmean2 pm10tmean2 o3tmean2 no2tmean2 ## 1 NA 34.00000 4.250000 19.98810 ## 2 NA NA 3.304348 23.19099 ## 3 NA 34.16667 3.333333 23.81548 ## 4 NA 47.00000 4.375000 30.43452 ## 5 NA NA 4.750000 30.33333 ## 6 NA 48.00000 5.833333 25.77233 4.matches(\"(.)\\\\1\"): selecionar variáveis que correspondem a uma expressão regular. Esta corresponde a qualquer variável que contenha caracteres repetidos. Você aprenderá mais sobre expressões regulares no capítulo Strings do livro R for data science. subset6 &lt;- select(chicago, matches(c(&quot;.m.&quot;), names(chicago))) head(subset6) ## tmpd pm25tmean2 pm10tmean2 o3tmean2 no2tmean2 ## 1 31.5 NA 34.00000 4.250000 19.98810 ## 2 33.0 NA NA 3.304348 23.19099 ## 3 33.0 NA 34.16667 3.333333 23.81548 ## 4 29.0 NA 47.00000 4.375000 30.43452 ## 5 32.0 NA NA 4.750000 30.33333 ## 6 40.0 NA 48.00000 5.833333 25.77233 5.num_range(\"x\", 1:3): Corresponde x1, x2 e x3. #Criando um objeto df que é um data frame df &lt;- as.data.frame(matrix(runif(100), nrow = 10)) df &lt;- tbl_df(df[c(3, 4, 7, 1, 9, 8, 5, 2, 6, 10)]) select(df, V4:V6) ## # A tibble: 10 x 8 ## V4 V7 V1 V9 V8 V5 V2 V6 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.919 0.874 0.122 0.922 0.275 0.0652 0.960 0.698 ## 2 0.456 0.825 0.953 0.707 0.674 0.424 0.395 0.601 ## 3 0.885 0.873 0.256 0.259 0.433 0.733 0.0619 0.0794 ## 4 0.562 0.708 0.313 0.654 0.00320 0.767 0.427 0.258 ## 5 0.430 0.556 0.684 0.250 0.613 0.818 0.0700 0.913 ## 6 0.930 0.235 0.260 0.297 0.134 0.396 0.349 0.912 ## 7 0.579 0.0431 0.960 0.151 0.0647 0.857 0.427 0.318 ## 8 0.574 0.0230 0.466 0.673 0.782 0.248 0.175 0.720 ## 9 0.0205 0.241 0.288 0.901 0.994 0.915 0.153 0.905 ## 10 0.0272 0.260 0.0209 0.869 0.119 0.915 0.628 0.678 select(df, num_range(&quot;V&quot;, 4:6)) ## # A tibble: 10 x 3 ## V4 V5 V6 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.919 0.0652 0.698 ## 2 0.456 0.424 0.601 ## 3 0.885 0.733 0.0794 ## 4 0.562 0.767 0.258 ## 5 0.430 0.818 0.913 ## 6 0.930 0.396 0.912 ## 7 0.579 0.857 0.318 ## 8 0.574 0.248 0.720 ## 9 0.0205 0.915 0.905 ## 10 0.0272 0.915 0.678 Você também pode usar expressões regulares mais gerais, se necessário. Veja a página de ajuda (?select) para mais detalhes. select() pode ser usado para renomear variáveis, mas raramente é útil porque descarta todas as variáveis não mencionadas explicitamente. Em vez disso, use rename(), que é uma variante de select() que mantém todas as variáveis que não são mencionadas explicitamente. Outra opção é usar select() em conjunto com o everything() auxiliar. Isso é útil se você tiver um punhado de variáveis que deseja mover para o início do quadro de dados. subset7 &lt;- select(chicago, o3tmean2, no2tmean2, everything()) head(subset7) ## o3tmean2 no2tmean2 city tmpd dptp date pm25tmean2 pm10tmean2 ## 1 4.250000 19.98810 chic 31.5 31.500 1987-01-01 NA 34.00000 ## 2 3.304348 23.19099 chic 33.0 29.875 1987-01-02 NA NA ## 3 3.333333 23.81548 chic 33.0 27.375 1987-01-03 NA 34.16667 ## 4 4.375000 30.43452 chic 29.0 28.625 1987-01-04 NA 47.00000 ## 5 4.750000 30.33333 chic 32.0 28.875 1987-01-05 NA NA ## 6 5.833333 25.77233 chic 40.0 35.125 1987-01-06 NA 48.00000 4.6.1 Exercícios Obter um subconjunto com as seguintes variáveis selecionadas: dep_time, dep_delay, arr_time, e arr_delayde do banco flights. O que acontece se você incluir o nome de uma variável várias vezes em uma select() chamada? O que a one_of() função faz? Por que pode ser útil em conjunto com esse vetor? vars &lt;- c(“year”, “month”, “day”, “dep_delay”, “arr_delay”) 4.7 rename() Para renomear variáveis em uma data.frames em R não é tão prático. E a função rename() foi projetada para facilitar esse processo. Os nomes das cinco primeiras variáveis do data frame chicago. #Imprimir às 3 primeiras linhas da primeira a quinta coluna. head(chicago[, 1:5], 3) ## city tmpd dptp date pm25tmean2 ## 1 chic 31.5 31.500 1987-01-01 NA ## 2 chic 33.0 29.875 1987-01-02 NA ## 3 chic 33.0 27.375 1987-01-03 NA A coluna dptp deve representar a temperatura do ponto de orvalho e a coluna pm25tmean2 fornece os dados do PM2.5. No entanto, esses nomes são bastante obscuros ou estranhos e provavelmente serão renomeados para algo mais sensato. chicago &lt;- rename(chicago, Temp_Orv = dptp, pm25 = pm25tmean2) head(chicago[, 1:5], 3) ## city tmpd Temp_Orv date pm25 ## 1 chic 31.5 31.500 1987-01-01 NA ## 2 chic 33.0 29.875 1987-01-02 NA ## 3 chic 33.0 27.375 1987-01-03 NA A sintaxe dentro da rename() função é ter o novo nome no lado esquerdo do = sinal e o nome antigo no lado direito. 4.7.1 Exercícios 4.8 mutate() Em certas situações é útil adicionar novas colunas/variáveis que são funções de colunas existentes no data frames, ou seja, criar novas variáveis derivadas de variáveis existentes. Esse é o trabalho de mutate(). Esta função adiciona novas colunas no final do seu conjunto de dados. mutate() fornece uma interface limpa para fazer isso. Lembre-se de que, quando você está no RStudio, a maneira mais fácil de ver todas as colunas é View(). Por exemplo, com os dados de poluição do ar, subtraindo a média dos dados. Dessa forma, podemos verificar se o nível de poluição do ar de um determinado dia é maior ou menor que a média (em oposição a observar seu nível absoluto). Aqui, criamos uma variável pm25difmean que subtrai a média da variável pm25. chicago &lt;- mutate(chicago, pm25difmean = pm25 - mean(pm25, na.rm = TRUE)) head(chicago) ## city tmpd Temp_Orv date pm25 pm10tmean2 o3tmean2 no2tmean2 ## 1 chic 31.5 31.500 1987-01-01 NA 34.00000 4.250000 19.98810 ## 2 chic 33.0 29.875 1987-01-02 NA NA 3.304348 23.19099 ## 3 chic 33.0 27.375 1987-01-03 NA 34.16667 3.333333 23.81548 ## 4 chic 29.0 28.625 1987-01-04 NA 47.00000 4.375000 30.43452 ## 5 chic 32.0 28.875 1987-01-05 NA NA 4.750000 30.33333 ## 6 chic 40.0 35.125 1987-01-06 NA 48.00000 5.833333 25.77233 ## pm25difmean ## 1 NA ## 2 NA ## 3 NA ## 4 NA ## 5 NA ## 6 NA Há também a função relacionada transmute(), que faz a mesma coisa que, mutate(), mas elimina todas as variáveis não transformadas. Aqui, desprezamos as variáveis PM10 e ozônio (O3). head(transmute(chicago, pm10difmean = pm10tmean2 - mean(pm10tmean2, na.rm = TRUE), O3difmean = o3tmean2 - mean(o3tmean2, na.rm = TRUE))) ## pm10difmean O3difmean ## 1 0.1047939 -15.18551 ## 2 NA -16.13117 ## 3 0.2714605 -16.10218 ## 4 13.1047939 -15.06051 ## 5 NA -14.68551 ## 6 14.1047939 -13.60218 "]
]
